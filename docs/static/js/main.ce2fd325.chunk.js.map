{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","height","className","src","alt","loading","GifGrid","state","setState","useEffect","then","imgs","setTimeout","useFetchgGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,MAKlB,SACI,uBACIO,KAAM,OACNC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAkBfG,YAAY,6B,+BCxBfC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAClDH,GAHe,+DAKKI,MAAMF,GALX,cAKbG,EALa,gBAMIA,EAAUC,OANd,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAeZM,GAfY,4CAAH,sD,gBCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,cAAC,IAAD,CAAUc,OAAQ,IAAlB,SACI,sBAAKC,UAAU,2CAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKP,EAAOQ,QAAQ,SACnC,4BAAIR,UCJPS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACtB,ECDyB,SAACA,GAC1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOE,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAENzB,EAAQC,GAAUyB,MAAK,SAACC,GAEpBC,YAAW,WAEPJ,EAAS,CACLhB,KAAMmB,EACNN,SAAS,MAEd,UAER,CAACpB,IAEGsB,EDnB2BM,CAAc5B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,6BAAKpB,IAEJoB,GAAW,2CAEZ,qBAAKH,UAAU,YAAf,SACI,6BACKJ,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEM/BkB,EAjBM,WACjB,MAAoC5C,mBAAS,CAAC,oBAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACI,qCACI,oBAAIiC,UAAU,QAAd,4BACA,cAAC,EAAD,CAAajC,cAAeA,IAC5B,uBACA,oBAAIiC,UAAU,YAAd,SACKa,EAAWrB,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTlC+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.ce2fd325.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((categ) => [inputValue, ...categ]);\r\n            setInputValue(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type={\"text\"}\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Search for any gif...\"\r\n            ></input>\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n    //peticion http\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        category\r\n    )}&limit=10&api_key=xuuaLUZ7FJy5CHMTx7ke0Z9ENUTLeZtL`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};\r\n","import LazyLoad from \"react-lazyload\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <LazyLoad height={200}>\r\n            <div className=\"card animate__animated animate__fadeInUp\">\r\n                <img src={url} alt={title} loading=\"lazy\"></img>\r\n                <p>{title}</p>\r\n            </div>\r\n        </LazyLoad>\r\n    );\r\n};\r\n","import { useFetchgGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchgGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                <ol>\r\n                    {images.map((img) => (\r\n                        <GifGridItem key={img.id} {...img}></GifGridItem>\r\n                    ))}\r\n                </ol>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchgGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    //el effect solo se dispara cuando cambia la categoria\r\n    useEffect(() => {\r\n        //luego getgifs realiza la peticion http, y obtenemos las imgs\r\n        getGifs(category).then((imgs) => {\r\n            //pequeÃ±o delay para realizar la carga de data\r\n            setTimeout(() => {\r\n                //cuando tenemos la data, usamos el state para cambiar la informacion, lo cual va a aplicar una renderizacion en el componente gifgrid\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                });\r\n            }, 200);\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([\"Tokyo Revengers\"]);\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title\">Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}></AddCategory>\r\n            <hr />\r\n            <ol className=\"container\">\r\n                {categories.map((category) => (\r\n                    <GifGrid key={category} category={category}></GifGrid>\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}